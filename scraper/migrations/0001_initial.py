# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-06-08 11:18
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import scraper.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, help_text="Relative xpath from DataItem's base to the link that contains data's information. Empty means information is inside base.", max_length=512, null=True, verbose_name='Link')),
                ('get_image', models.BooleanField(default=True, help_text='Download images found inside extracted content')),
                ('replace_rules', jsonfield.fields.JSONField(blank=True, help_text='List of Regex rules will be applied to refine data', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CrawlUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base', models.URLField(help_text='Base url for the crawled target. Placeholder {0} could be used if url patterns is given.', max_length=256, verbose_name='Base URL')),
                ('number_pattern', jsonfield.fields.JSONField(blank=True, help_text='Number pattern must be in(start, stop, step) format.', null=True, verbose_name='URL number pattern')),
                ('text_pattern', jsonfield.fields.JSONField(blank=True, help_text='Define a list of texts that will be replaced for placeholder {0} to generate crawling URLs.', null=True, verbose_name='URL text pattern')),
            ],
        ),
        migrations.CreateModel(
            name='DataItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Data's name. E.g: Article, News, Video, etc...", max_length=50, verbose_name='Name')),
                ('base', models.CharField(blank=True, help_text="Base XPath to target's data container in page. Empty means whole document.", max_length=512, null=True, verbose_name='Base XPath')),
            ],
        ),
        migrations.CreateModel(
            name='LocalContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_path', models.CharField(max_length=256)),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('state', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ProxyServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Proxy Server Name')),
                ('address', models.CharField(max_length=128, verbose_name='Address')),
                ('port', models.IntegerField(verbose_name='Port')),
                ('protocol', models.CharField(choices=[(b'http', b'HTTP'), (b'https', b'HTTPS')], max_length=16, verbose_name='Protocol')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=64, null=True)),
                ('data', jsonfield.fields.JSONField(default=dict)),
                ('other', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scraper.LocalContent')),
            ],
        ),
        migrations.CreateModel(
            name='Selector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.SlugField()),
                ('xpath', models.CharField(max_length=512)),
                ('attribute', models.CharField(blank=True, help_text="Name of element's attribute. If given, element's attribute will be returned instead of element's content.", max_length=50, null=True, verbose_name='Attribute')),
                ('data_type', models.CharField(choices=[(b'text', b'Text content'), (b'html', b'HTML content'), (b'binary', b'Binary content')], max_length=64)),
                ('required_words', jsonfield.fields.JSONField(blank=True, help_text='Only store item if value returned by this selector contains given words.', null=True, verbose_name='Required words')),
                ('black_words', jsonfield.fields.JSONField(blank=True, help_text='Skip item if value returned by this selector contains one of given words.', null=True, verbose_name='Black words')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selectors', to='scraper.Collector', verbose_name='Collector')),
            ],
        ),
        migrations.CreateModel(
            name='Spider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('expand_links', jsonfield.fields.JSONField(default=dict, help_text='List of links (as XPaths) to other pages holding target links (will not be extracted)')),
                ('crawl_depth', models.PositiveIntegerField(default=1, help_text='Set this > 1 in case of crawling from this page')),
                ('headers', jsonfield.fields.JSONField(blank=True, help_text='Define custom headers when download pages.', null=True, verbose_name='Headers')),
                ('proxy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='scraper.ProxyServer')),
            ],
            bases=(scraper.mixins.ExtractorMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserAgent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='UA Name')),
                ('value', models.CharField(max_length=256, verbose_name='User Agent String')),
            ],
        ),
        migrations.AddField(
            model_name='result',
            name='spider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='scraper.Spider', verbose_name='Spider'),
        ),
        migrations.AddField(
            model_name='dataitem',
            name='spider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_items', to='scraper.Spider', verbose_name='Spider'),
        ),
        migrations.AddField(
            model_name='crawlurl',
            name='spider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='scraper.Spider', verbose_name='Spider'),
        ),
        migrations.AddField(
            model_name='collector',
            name='data_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectors', to='scraper.DataItem', verbose_name='Data item'),
        ),
    ]
