# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-15 07:21
from __future__ import unicode_literals

from django.db import migrations, models
import jsonfield.fields
import scraper.validators


class Migration(migrations.Migration):

    dependencies = [
        ('scraper', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='collector',
            name='link',
            field=models.CharField(blank=True, help_text="Relative xpath from DataItem's base to the link that contains data's information. Empty means information is inside base.", max_length=512, null=True, validators=[scraper.validators.XPathValidator()], verbose_name='Link'),
        ),
        migrations.AlterField(
            model_name='crawlurl',
            name='number_pattern',
            field=jsonfield.fields.JSONField(blank=True, help_text='Number pattern must be in(start, stop, step) format.', null=True, validators=[scraper.validators.NumberPatternValidator(message='Number pattern must be in format (start, stop, step).')], verbose_name='URL number pattern'),
        ),
        migrations.AlterField(
            model_name='crawlurl',
            name='text_pattern',
            field=jsonfield.fields.JSONField(blank=True, help_text='Define a list of texts that will be replaced for placeholder {0} to generate crawling URLs.', null=True, validators=[scraper.validators.ListValidator(unicode, 'Please enter a list of texts.')], verbose_name='URL text pattern'),
        ),
        migrations.AlterField(
            model_name='dataitem',
            name='base',
            field=models.CharField(blank=True, help_text="Base XPath to target's data container in page. Empty means whole document.", max_length=512, null=True, validators=[scraper.validators.XPathValidator()], verbose_name='Base XPath'),
        ),
        migrations.AlterField(
            model_name='selector',
            name='black_words',
            field=jsonfield.fields.JSONField(blank=True, help_text='Skip item if value returned by this selector contains one of given words.', null=True, validators=[scraper.validators.ListValidator(unicode, 'Black words must be a list of texts.')], verbose_name='Black words'),
        ),
        migrations.AlterField(
            model_name='selector',
            name='required_words',
            field=jsonfield.fields.JSONField(blank=True, help_text='Only store item if value returned by this selector contains given words.', null=True, validators=[scraper.validators.RequiredWordsValidator('Required words must be a list of texts or a list of text lists.')], verbose_name='Required words'),
        ),
        migrations.AlterField(
            model_name='selector',
            name='xpath',
            field=models.CharField(max_length=512, validators=[scraper.validators.XPathValidator()], verbose_name='XPath to the HTML element that contains data.'),
        ),
        migrations.AlterField(
            model_name='spider',
            name='expand_links',
            field=jsonfield.fields.JSONField(default=dict, help_text='List of links (as XPaths) to other pages holding target links (will not be extracted)', validators=[scraper.validators.XPathListValidator('Please enter a list of XPaths.')]),
        ),
        migrations.AlterField(
            model_name='spider',
            name='headers',
            field=jsonfield.fields.JSONField(blank=True, help_text='Custom headers for downloads', null=True, validators=[scraper.validators.DictValidator()], verbose_name='Headers'),
        ),
    ]
